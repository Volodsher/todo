{"version":3,"sources":["components/Func/TodoForm/TodoForm.js","components/Func/Todo/Todo.js","components/Func/TodoList/TodoList.js","components/Func/Footer/Footer.js","components/Func/TodoApp/TodoApp.js","components/Class/TodoForm/TodoForm.js","components/Class/Todo/Todo.js","components/Class/TodoList/TodoList.js","components/Class/Footer/Footer.js","components/Class/CTodoApp/CTodoApp.js","components/Redux/TodoForm/TodoForm.js","components/Redux/Todo/Todo.js","components/Redux/TodoList/TodoList.js","components/Redux/Footer/Footer.js","components/Redux/RTodoApp/RTodoApp.js","App.js","index.js"],"names":["TodoForm","setTodosGet","getTodos","useState","text","setText","onSubmit","event","preventDefault","todo","id","shortid","generate","complete","trim","name","className","placeholder","onChange","target","value","Todo","toggleComplete","toDelete","style","textDecoration","color","type","checked","htmlFor","onClick","TodoList","todos","setTodos","todosToShow","toggleAll","setToggleAll","todosNew","filter","display","map","Footer","todosGet","todosSet","todosToShowGet","TodosToShowSet","length","href","borderColor","FuncTodoApp","setTodosToShow","CTodoApp","RTodoApp","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03987409.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nexport default function TodoForm({ setTodosGet, getTodos }) {\n  const [text, setText] = useState('');\n\n  const handleChange = ({ target }) => {\n    setText(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const todo = {\n      id: shortid.generate(),\n      text,\n      complete: false,\n    };\n\n    if (todo.text.trim() !== '') {\n      setTodosGet([todo, ...getTodos]);\n    }\n\n    setText('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleChange}\n        value={text}\n      />\n    </form>\n  );\n}\n\nTodoForm.propTypes = {\n  setTodosGet: PropTypes.func.isRequired,\n  getTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Todo({ todo, toggleComplete, text, toDelete }) {\n  return (\n    <li\n      className=\"\"\n      style={{\n        textDecoration:\n          todo.complete\n            ? 'line-through'\n            : '',\n        color:\n          todo.complete\n            ? '#e4e4e4'\n            : '',\n      }}\n    >\n      <div className=\"view\">\n        <input\n          name=\"status\"\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onChange={toggleComplete}\n          checked={todo.complete ? 'checked' : ''}\n        />\n        <label htmlFor=\"todo-1\">\n          {text}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={toDelete}\n        />\n      </div>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  text: PropTypes.string.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  toDelete: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from '../Todo/Todo';\n\nexport default function TodoList({ todos, setTodos, todosToShow }) {\n  const [toggleAll, setToggleAll] = useState(true);\n\n  const handleDelete = (id) => {\n    setTodos([...todos].filter(todo => todo.id !== id));\n  };\n\n  const toggleComplete = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          complete: !todo.complete,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const toggleAllComplete = () => {\n    setToggleAll(!toggleAll);\n\n    setTodos(\n      [...todos].map(todo => ({\n        ...todo,\n        complete: toggleAll,\n      }))\n    );\n  };\n\n  let todosNew = [];\n\n  if (todosToShow === 'all') {\n    todosNew = [...todos];\n  } else if (todosToShow === 'active') {\n    todosNew = [...todos].filter(todo => !todo.complete);\n  } else if (todosToShow === 'complete') {\n    todosNew = [...todos].filter(todo => todo.complete);\n  }\n\n  return (\n    <section className=\"main\" style={{ display: 'block' }}>\n      <input\n        onClick={toggleAllComplete}\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        name=\"toggleAll\"\n        className=\"toggle-all\"\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {todosNew.map(todo => (\n          <Todo\n            todos={todosNew}\n            todo={todo}\n            key={todo.id}\n            text={todo.text}\n            toDelete={() => handleDelete(todo.id)}\n            toggleComplete={() => toggleComplete(todo.id)}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosToShow: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Footer(\n  { todosGet,\n    todosSet,\n    todosToShowGet,\n    TodosToShowSet }\n) {\n  const lengthOfTodos = () => [...todosGet].filter(\n    todo => todo.complete === false\n  ).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n\n      <span className=\"todo-count\">\n        {`${lengthOfTodos()} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => TodosToShowSet('all')}\n            style={{\n              borderColor:\n              todosToShowGet === 'all'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => TodosToShowSet('active')}\n            style={{\n              borderColor:\n              todosToShowGet === 'active'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => TodosToShowSet('complete')}\n            style={{\n              borderColor:\n              todosToShowGet === 'complete'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        onClick={() => {\n          todosSet([...todosGet].filter(todo => !todo.complete));\n        }}\n      >\n        Clear all complete\n      </button>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  todosGet: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosSet: PropTypes.func.isRequired,\n  TodosToShowSet: PropTypes.func.isRequired,\n  todosToShowGet: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport TodoForm from '../TodoForm/TodoForm';\nimport TodoList from '../TodoList/TodoList';\nimport Footer from '../Footer/Footer';\n\nexport default function FuncTodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [todosToShow, setTodosToShow] = useState('all');\n\n  if (todos.length === 0) {\n    return (\n      <>\n        <header className=\"header\">Func-Todo 0</header>\n        <section className=\"todoapp\">\n          <TodoForm setTodosGet={setTodos} getTodos={todos} />\n        </section>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <header className=\"header\">Func-Todo {todos.filter((todo) => !todo.complete).length}</header>\n      <section className=\"todoapp\">\n        <TodoForm className=\"header\" setTodosGet={setTodos} getTodos={todos} />\n        <TodoList todos={todos} setTodos={setTodos} todosToShow={todosToShow} />\n        <Footer\n          todosGet={todos}\n          todosSet={setTodos}\n          todosToShowGet={todosToShow}\n          TodosToShowSet={setTodosToShow}\n        />\n      </section>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nexport default function TodoForm({ setTodosGet, getTodos }) {\n  const [text, setText] = useState('');\n\n  const handleChange = ({ target }) => {\n    setText(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const todo = {\n      id: shortid.generate(),\n      text,\n      complete: false,\n    };\n\n    if (todo.text.trim() !== '') {\n      setTodosGet([todo, ...getTodos]);\n    }\n\n    setText('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleChange}\n        value={text}\n      />\n    </form>\n  );\n}\n\nTodoForm.propTypes = {\n  setTodosGet: PropTypes.func.isRequired,\n  getTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Todo({ todo, toggleComplete, text, toDelete }) {\n  return (\n    <li\n      className=\"\"\n      style={{\n        textDecoration:\n          todo.complete\n            ? 'line-through'\n            : '',\n        color:\n          todo.complete\n            ? '#e4e4e4'\n            : '',\n      }}\n    >\n      <div className=\"view\">\n        <input\n          name=\"status\"\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onChange={toggleComplete}\n          checked={todo.complete ? 'checked' : ''}\n        />\n        <label htmlFor=\"todo-1\">\n          {text}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={toDelete}\n        />\n      </div>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  text: PropTypes.string.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  toDelete: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from '../Todo/Todo';\n\nexport default function TodoList({ todos, setTodos, todosToShow }) {\n  const [toggleAll, setToggleAll] = useState(true);\n\n  const handleDelete = (id) => {\n    setTodos([...todos].filter(todo => todo.id !== id));\n  };\n\n  const toggleComplete = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          complete: !todo.complete,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const toggleAllComplete = () => {\n    setToggleAll(!toggleAll);\n\n    setTodos(\n      [...todos].map(todo => ({\n        ...todo,\n        complete: toggleAll,\n      }))\n    );\n  };\n\n  let todosNew = [];\n\n  if (todosToShow === 'all') {\n    todosNew = [...todos];\n  } else if (todosToShow === 'active') {\n    todosNew = [...todos].filter(todo => !todo.complete);\n  } else if (todosToShow === 'complete') {\n    todosNew = [...todos].filter(todo => todo.complete);\n  }\n\n  return (\n    <section className=\"main\" style={{ display: 'block' }}>\n      <input\n        onClick={toggleAllComplete}\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        name=\"toggleAll\"\n        className=\"toggle-all\"\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {todosNew.map(todo => (\n          <Todo\n            todos={todosNew}\n            todo={todo}\n            key={todo.id}\n            text={todo.text}\n            toDelete={() => handleDelete(todo.id)}\n            toggleComplete={() => toggleComplete(todo.id)}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosToShow: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Footer(\n  { todosGet,\n    todosSet,\n    todosToShowGet,\n    TodosToShowSet }\n) {\n  const lengthOfTodos = () => [...todosGet].filter(\n    todo => todo.complete === false\n  ).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n\n      <span className=\"todo-count\">\n        {`${lengthOfTodos()} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => TodosToShowSet('all')}\n            style={{\n              borderColor:\n              todosToShowGet === 'all'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => TodosToShowSet('active')}\n            style={{\n              borderColor:\n              todosToShowGet === 'active'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => TodosToShowSet('complete')}\n            style={{\n              borderColor:\n              todosToShowGet === 'complete'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        onClick={() => {\n          todosSet([...todosGet].filter(todo => !todo.complete));\n        }}\n      >\n        Clear all complete\n      </button>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  todosGet: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosSet: PropTypes.func.isRequired,\n  TodosToShowSet: PropTypes.func.isRequired,\n  todosToShowGet: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport TodoForm from '../TodoForm/TodoForm';\nimport TodoList from '../TodoList/TodoList';\nimport Footer from '../Footer/Footer';\n\nexport default function CTodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [todosToShow, setTodosToShow] = useState('all');\n\n  if (todos.length === 0) {\n    return (\n      <>\n        <header className=\"header\">Func-Todo 0</header>\n        <section className=\"todoapp\">\n          <TodoForm setTodosGet={setTodos} getTodos={todos} />\n        </section>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <header className=\"header\">Func-Todo {todos.filter((todo) => !todo.complete).length}</header>\n      <section className=\"todoapp\">\n        <TodoForm className=\"header\" setTodosGet={setTodos} getTodos={todos} />\n        <TodoList todos={todos} setTodos={setTodos} todosToShow={todosToShow} />\n        <Footer\n          todosGet={todos}\n          todosSet={setTodos}\n          todosToShowGet={todosToShow}\n          TodosToShowSet={setTodosToShow}\n        />\n      </section>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nexport default function TodoForm({ setTodosGet, getTodos }) {\n  const [text, setText] = useState('');\n\n  const handleChange = ({ target }) => {\n    setText(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const todo = {\n      id: shortid.generate(),\n      text,\n      complete: false,\n    };\n\n    if (todo.text.trim() !== '') {\n      setTodosGet([todo, ...getTodos]);\n    }\n\n    setText('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleChange}\n        value={text}\n      />\n    </form>\n  );\n}\n\nTodoForm.propTypes = {\n  setTodosGet: PropTypes.func.isRequired,\n  getTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Todo({ todo, toggleComplete, text, toDelete }) {\n  return (\n    <li\n      className=\"\"\n      style={{\n        textDecoration:\n          todo.complete\n            ? 'line-through'\n            : '',\n        color:\n          todo.complete\n            ? '#e4e4e4'\n            : '',\n      }}\n    >\n      <div className=\"view\">\n        <input\n          name=\"status\"\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onChange={toggleComplete}\n          checked={todo.complete ? 'checked' : ''}\n        />\n        <label htmlFor=\"todo-1\">\n          {text}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={toDelete}\n        />\n      </div>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  text: PropTypes.string.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  toDelete: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from '../Todo/Todo';\n\nexport default function TodoList({ todos, setTodos, todosToShow }) {\n  const [toggleAll, setToggleAll] = useState(true);\n\n  const handleDelete = (id) => {\n    setTodos([...todos].filter(todo => todo.id !== id));\n  };\n\n  const toggleComplete = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          complete: !todo.complete,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const toggleAllComplete = () => {\n    setToggleAll(!toggleAll);\n\n    setTodos(\n      [...todos].map(todo => ({\n        ...todo,\n        complete: toggleAll,\n      }))\n    );\n  };\n\n  let todosNew = [];\n\n  if (todosToShow === 'all') {\n    todosNew = [...todos];\n  } else if (todosToShow === 'active') {\n    todosNew = [...todos].filter(todo => !todo.complete);\n  } else if (todosToShow === 'complete') {\n    todosNew = [...todos].filter(todo => todo.complete);\n  }\n\n  return (\n    <section className=\"main\" style={{ display: 'block' }}>\n      <input\n        onClick={toggleAllComplete}\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        name=\"toggleAll\"\n        className=\"toggle-all\"\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {todosNew.map(todo => (\n          <Todo\n            todos={todosNew}\n            todo={todo}\n            key={todo.id}\n            text={todo.text}\n            toDelete={() => handleDelete(todo.id)}\n            toggleComplete={() => toggleComplete(todo.id)}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosToShow: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Footer(\n  { todosGet,\n    todosSet,\n    todosToShowGet,\n    TodosToShowSet }\n) {\n  const lengthOfTodos = () => [...todosGet].filter(\n    todo => todo.complete === false\n  ).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n\n      <span className=\"todo-count\">\n        {`${lengthOfTodos()} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => TodosToShowSet('all')}\n            style={{\n              borderColor:\n              todosToShowGet === 'all'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => TodosToShowSet('active')}\n            style={{\n              borderColor:\n              todosToShowGet === 'active'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => TodosToShowSet('complete')}\n            style={{\n              borderColor:\n              todosToShowGet === 'complete'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        onClick={() => {\n          todosSet([...todosGet].filter(todo => !todo.complete));\n        }}\n      >\n        Clear all complete\n      </button>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  todosGet: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosSet: PropTypes.func.isRequired,\n  TodosToShowSet: PropTypes.func.isRequired,\n  todosToShowGet: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport TodoForm from '../TodoForm/TodoForm';\nimport TodoList from '../TodoList/TodoList';\nimport Footer from '../Footer/Footer';\n\nexport default function RTodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [todosToShow, setTodosToShow] = useState('all');\n\n  if (todos.length === 0) {\n    return (\n      <>\n        <header className=\"header\">Redux-Todo 0</header>\n        <section className=\"todoapp\">\n          <TodoForm setTodosGet={setTodos} getTodos={todos} />\n        </section>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <header className=\"header\">Redux-Todo {todos.filter((todo) => !todo.complete).length}</header>\n      <section className=\"todoapp\">\n        <TodoForm className=\"header\" setTodosGet={setTodos} getTodos={todos} />\n        <TodoList todos={todos} setTodos={setTodos} todosToShow={todosToShow} />\n        <Footer\n          todosGet={todos}\n          todosSet={setTodos}\n          todosToShowGet={todosToShow}\n          TodosToShowSet={setTodosToShow}\n        />\n      </section>\n    </>\n  );\n}\n","import React, { Fragment } from 'react';\nimport FuncTodoApp from './components/Func/TodoApp/TodoApp';\nimport ClassTodoApp from './components/Class/CTodoApp/CTodoApp';\nimport RTodoApp from './components/Redux/RTodoApp/RTodoApp';\n\nconst App = () => (\n  <>\n    <FuncTodoApp />\n    <ClassTodoApp />\n    <RTodoApp />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}