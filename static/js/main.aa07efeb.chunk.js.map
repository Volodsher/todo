{"version":3,"sources":["components/Func/TodoForm/TodoForm.js","components/Func/Todo/Todo.js","components/Func/TodoList/TodoList.js","components/Func/Footer/Footer.js","components/Func/TodoApp/TodoApp.js","components/Class/CTodoForm/CTodoForm.js","components/Class/CTodo/CTodo.js","components/Class/CTodoList/CTodoList.js","components/Class/CFooter/CFooter.js","components/Class/CTodoApp/CTodoApp.js","components/Redux/RTodoForm/RTodoForm.js","components/Redux/actions.js","components/Redux/RTodo/RTodo.js","components/Redux/RTodoList/RTodoList.js","components/Redux/RFooter/RFooter.js","components/Redux/RTodoApp/RTodoApp.js","components/Redux/reducers/reducer.js","App.js","index.js"],"names":["TodoForm","setTodosGet","getTodos","useState","text","setText","onSubmit","event","preventDefault","todo","id","shortid","generate","complete","trim","name","className","placeholder","onChange","target","value","Todo","this","props","toggleComplete","toDelete","style","textDecoration","color","type","checked","htmlFor","onClick","Component","TodoList","tasks","setTasks","tasksToShow","toggleAll","setToggleAll","todosNew","filter","display","map","Footer","todosGet","todosSet","todosToShowGet","TodosToShowSet","length","href","borderColor","FuncTodoApp","todos","setTodos","todosToShow","setTodosToShow","state","handleChange","setState","handleSubmit","addCTodoSet","CTodo","cToggleComplete","CTodoList","allComplete","prevState","handleToggleAll","cTodosNew","cTasksToShow","cTasks","handleDeleteTodo","handleToggleOne","CFooter","jobs","handleJobsToShow","jobsToShow","deleteAllCompleted","CTodoApp","cTodos","cTodosToShow","addCTodo","deleteTodo","cToggleAllComplete","toggle","toggleAllComplete","handleTodosToShow","handler","getCTodos","connect","dispatch","addNewTodo","payload","RTodo","appState","handleDelete","deleteOne","completeOne","toggleCompleteAll","completeAll","rTodosToShow","rTodos","showAll","showActive","showComplete","clearCompleted","initialState","appReducer","action","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa07efeb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nexport default function TodoForm({ setTodosGet, getTodos }) {\n  const [text, setText] = useState('');\n\n  const handleChange = ({ target }) => {\n    setText(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const todo = {\n      id: shortid.generate(),\n      text,\n      complete: false,\n    };\n\n    if (todo.text.trim() !== '') {\n      setTodosGet([todo, ...getTodos]);\n    }\n\n    setText('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleChange}\n        value={text}\n      />\n    </form>\n  );\n}\n\nTodoForm.propTypes = {\n  setTodosGet: PropTypes.func.isRequired,\n  getTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Todo extends Component {\n  render() {\n    const { todo, toggleComplete, text, toDelete } = this.props;\n\n    return (\n      <li\n        className=\"\"\n        style={{\n          textDecoration:\n            todo.complete\n              ? 'line-through'\n              : '',\n          color:\n            todo.complete\n              ? '#e4e4e4'\n              : '',\n        }}\n      >\n        <div className=\"view\">\n          <input\n            name=\"status\"\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={todo.id}\n            onChange={toggleComplete}\n            checked={todo.complete ? 'checked' : ''}\n          />\n          <label htmlFor=\"todo-1\">\n            {text}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={toDelete}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  text: PropTypes.string.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  toDelete: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from '../Todo/Todo';\n\nexport default function TodoList({ tasks, setTasks, tasksToShow }) {\n  const [toggleAll, setToggleAll] = useState(true);\n\n  const handleDelete = (id) => {\n    setTasks([...tasks].filter(todo => todo.id !== id));\n  };\n\n  const toggleComplete = (id) => {\n    setTasks(tasks.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          complete: !todo.complete,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const toggleAllComplete = () => {\n    setToggleAll(!toggleAll);\n\n    setTasks(\n      [...tasks].map(todo => ({\n        ...todo,\n        complete: toggleAll,\n      }))\n    );\n  };\n\n  let todosNew = [];\n\n  if (tasksToShow === 'all') {\n    todosNew = [...tasks];\n  } else if (tasksToShow === 'active') {\n    todosNew = [...tasks].filter(todo => !todo.complete);\n  } else if (tasksToShow === 'complete') {\n    todosNew = [...tasks].filter(todo => todo.complete);\n  }\n\n  return (\n    <section className=\"main\" style={{ display: 'block' }}>\n      <input\n        onClick={toggleAllComplete}\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        name=\"toggleAll\"\n        className=\"toggle-all\"\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {todosNew.map(todo => (\n          <Todo\n            todo={todo}\n            key={todo.id}\n            text={todo.text}\n            toDelete={() => handleDelete(todo.id)}\n            toggleComplete={() => toggleComplete(todo.id)}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nTodoList.propTypes = {\n  setTasks: PropTypes.func.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  tasksToShow: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Footer(\n  { todosGet,\n    todosSet,\n    todosToShowGet,\n    TodosToShowSet }\n) {\n  const lengthOfTodos = () => [...todosGet].filter(\n    todo => todo.complete === false\n  ).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n\n      <span className=\"todo-count\">\n        {`${lengthOfTodos()} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => TodosToShowSet('all')}\n            style={{\n              borderColor:\n              todosToShowGet === 'all'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => TodosToShowSet('active')}\n            style={{\n              borderColor:\n              todosToShowGet === 'active'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => TodosToShowSet('complete')}\n            style={{\n              borderColor:\n              todosToShowGet === 'complete'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        onClick={() => {\n          todosSet([...todosGet].filter(todo => !todo.complete));\n        }}\n      >\n        Clear all completed\n      </button>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  todosGet: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  todosSet: PropTypes.func.isRequired,\n  TodosToShowSet: PropTypes.func.isRequired,\n  todosToShowGet: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport TodoForm from '../TodoForm/TodoForm';\nimport TodoList from '../TodoList/TodoList';\nimport Footer from '../Footer/Footer';\n\nexport default function FuncTodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [todosToShow, setTodosToShow] = useState('all');\n\n  if (todos.length === 0) {\n    return (\n      <>\n        <header className=\"header\">Func-Todo 0</header>\n        <section className=\"todoapp\">\n          <TodoForm setTodosGet={setTodos} getTodos={todos} />\n        </section>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <header className=\"header\">Func-Todo {todos.filter((todo) => !todo.complete).length}</header>\n      <section className=\"todoapp\">\n        <TodoForm className=\"header\" setTodosGet={setTodos} getTodos={todos} />\n        <TodoList tasks={todos} setTasks={setTodos} tasksToShow={todosToShow} />\n        <Footer\n          todosGet={todos}\n          todosSet={setTodos}\n          todosToShowGet={todosToShow}\n          TodosToShowSet={setTodosToShow}\n        />\n      </section>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nexport default class TodoForm extends Component {\n  state = {\n    text: '',\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.addCTodoSet({\n      id: shortid.generate(),\n      text: this.state.text,\n      complete: false,\n    });\n    this.setState({\n      text: '',\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          name=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleChange}\n          value={this.state.text}\n        />\n      </form>\n    );\n  }\n}\n\nTodoForm.propTypes = {\n  addCTodoSet: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function CTodo({ todo, cToggleComplete, text, toDelete }) {\n  return (\n    <li\n      className=\"\"\n      style={{\n        textDecoration:\n          todo.complete\n            ? 'line-through'\n            : '',\n        color:\n          todo.complete\n            ? '#e4e4e4'\n            : '',\n      }}\n    >\n      <div className=\"view\">\n        <input\n          name=\"status\"\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onChange={cToggleComplete}\n          checked={todo.complete ? 'checked' : ''}\n        />\n        <label htmlFor=\"todo-1\">\n          {text}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={toDelete}\n        />\n      </div>\n    </li>\n  );\n}\n\nCTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  text: PropTypes.string.isRequired,\n  cToggleComplete: PropTypes.func.isRequired,\n  toDelete: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CTodo from '../CTodo/CTodo';\n\nexport default class CTodoList extends Component {\n  state = {\n    toggleAll: true\n  }\n  \n  allComplete = () => {\n    this.setState(prevState => ({\n      toggleAll: !prevState.toggleAll\n    }));\n\n    this.props.handleToggleAll(this.state.toggleAll);\n  }\n\n  render() {\n    let cTodosNew = [];\n  \n    if (this.props.cTasksToShow === 'all') {\n      cTodosNew = [...this.props.cTasks];\n    } else if (this.props.cTasksToShow === 'active') {\n      cTodosNew = [...this.props.cTasks].filter(todo => !todo.complete);\n    } else if (this.props.cTasksToShow === 'complete') {\n      cTodosNew = [...this.props.cTasks].filter(todo => todo.complete);\n    }\n\n    return (\n      <section className=\"main\" style={{ display: 'block' }}>\n        <input\n          onClick={this.allComplete}\n          type=\"checkbox\"\n          id=\"c-toggle-all\"\n          name=\"toggleAll\"\n          className=\"c-toggle-all\"\n        />\n        <label htmlFor=\"c-toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {cTodosNew.map(todo => (\n            <CTodo\n              todo={todo}\n              key={todo.id}\n              text={todo.text}\n              toDelete={() => this.props.handleDeleteTodo(todo.id)}\n              cToggleComplete={() => this.props.handleToggleOne(todo.id)}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nCTodoList.propTypes = {\n  handleDeleteTodo: PropTypes.func.isRequired,\n  handleToggleOne: PropTypes.func.isRequired,\n  cTasks: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  cTasksToShow: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class CFooter extends Component {\n\n  render() {\n    const {\n      jobs,\n      handleJobsToShow,\n      jobsToShow,\n      deleteAllCompleted\n    } = this.props;\n    const lengthOfJobs = () => [...jobs].filter(\n      todo => todo.complete === false\n    ).length;\n\n    return (\n      <footer className=\"footer\" style={{ display: 'block' }}>\n  \n        <span className=\"todo-count\">\n          {`${lengthOfJobs()} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              onClick={() => handleJobsToShow('all')}\n              style={{\n                borderColor:\n                  jobsToShow === 'all'\n                  ? 'rgba(175, 47, 47, 0.2)'\n                  : '',\n              }}\n            >\n              All\n            </a>\n          </li>\n  \n          <li>\n            <a\n              href=\"#/active\"\n              onClick={() => handleJobsToShow('active')}\n              style={{\n                borderColor:\n                  jobsToShow === 'active'\n                  ? 'rgba(175, 47, 47, 0.2)'\n                  : '',\n              }}\n            >\n              Active\n            </a>\n          </li>\n  \n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={() => handleJobsToShow('complete')}\n              style={{\n                borderColor:\n                  jobsToShow === 'complete'\n                  ? 'rgba(175, 47, 47, 0.2)'\n                  : '',\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          style={{ display: 'block' }}\n          onClick={() => deleteAllCompleted()}\n        >\n          Clear all completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nCFooter.propTypes = {\n  jobs: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  handleJobsToShow: PropTypes.func.isRequired,\n  jobsToShow: PropTypes.string.isRequired,\n  deleteAllCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport CTodoForm from '../CTodoForm/CTodoForm';\nimport CTodoList from '../CTodoList/CTodoList';\nimport CFooter from '../CFooter/CFooter';\n\nexport default class CTodoApp extends Component {\n  state = {\n    cTodos: [],\n    cTodosToShow: 'all'\n  }\n\n  addCTodo = (todo) => {\n    if (todo.text.trim() !== '') {\n      this.setState(prevState => ({\n        cTodos: [todo, ...prevState.cTodos],\n      }));\n    }\n  };\n\n  cToggleComplete = (id) => {\n    this.setState(prevState => ({\n      cTodos: prevState.cTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            complete: !todo.complete,\n          };\n        }\n        \n        return todo;\n      })\n    }))\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      cTodos: prevState.cTodos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  deleteAllCompleted = () => {\n    this.setState(prevState => ({\n      cTodos: prevState.cTodos.filter(todo => todo.complete !== true)\n    }));\n  }\n\n  cToggleAllComplete = (toggle) => {\n    this.setState(prevState => ({\n      cTodos: prevState.cTodos.map(todo => ({\n        ...todo,\n        complete: !prevState.toggleAllComplete,\n      })),\n      toggleAllComplete: toggle,\n    }));\n  }\n\n  handleTodosToShow = (handler) => {\n    this.setState(() => ({\n      cTodosToShow: handler\n    }))\n  }\n\n  render() {\n    const { cTodos, cTodosToShow } = this.state;\n    const {\n      addCTodo,\n      cToggleComplete,\n      deleteTodo,\n      cToggleAllComplete,\n      handleTodosToShow,\n      deleteAllCompleted\n    } = this;\n\n    if (cTodos.length === 0) {\n      return (\n        <>\n          <header className=\"header\">Class-Todo 0</header>\n          <section className=\"todoapp\">\n            <CTodoForm addCTodoSet={addCTodo} getCTodos={cTodos} />\n          </section>\n        </>\n      );\n    }\n\n    return (\n      <>\n        <header className=\"header\">Class-Todo {cTodos.filter((todo) => !todo.complete).length}</header>\n        <section className=\"todoapp\">\n          <CTodoForm addCTodoSet={addCTodo} getCTodos={cTodos} />\n          <CTodoList\n            cTasks={cTodos}\n            cTasksToShow={cTodosToShow}\n            handleDeleteTodo={deleteTodo}\n            handleToggleAll={cToggleAllComplete}\n            handleToggleOne={cToggleComplete}\n          />\n          <CFooter\n            jobs={cTodos}\n            // todosSet={setTodos}\n            jobsToShow={cTodosToShow}\n            handleJobsToShow={handleTodosToShow}\n            deleteAllCompleted={deleteAllCompleted}\n          />\n        </section>\n\n      </>\n    )\n  }\n}\n","import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nimport { addRTodo } from '../actions';\nimport { connect } from 'react-redux';\n\nfunction RTodoForm({ addNewTodo }) {\n  const [text, setText] = useState('');\n\n  const handleChange = ({ target }) => {\n    setText(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const todo = {\n      id: shortid.generate(),\n      text,\n      complete: false,\n    };\n\n    if (todo.text.trim() !== '') {\n      addNewTodo(todo)\n    }\n\n    setText('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleChange}\n        value={text}\n      />\n    </form>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n state,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addNewTodo: (todo) => dispatch(addRTodo(todo)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RTodoForm);\n\nRTodoForm.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","export const addRTodo = (payload) => ({\n  type: 'ADD_RTODO',\n  payload\n});\n\nexport const deleteOne = (payload) => ({\n  type: 'DELETE_ONE',\n  payload\n});\n\nexport const completeOne = (payload) => ({\n  type: 'COMPLETE_ONE',\n  payload\n});\n\nexport const completeAll = (payload) => ({\n  type: 'COMPLETE_ALL',\n  payload\n});\n\nexport const clearCompleted = () => ({\n  type: 'CLEAR_COMPLETED',\n});\n\nexport const toShowAll = () => ({\n  type: 'SHOW_ALL',\n});\n\nexport const toShowActive = () => ({\n  type: 'SHOW_ACTIVE',\n});\n\nexport const toShowComplete = () => ({\n  type: 'SHOW_COMPLETE',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function RTodo({ todo, toggleComplete, text, toDelete }) {\n  return (\n    <li\n      className=\"\"\n      style={{\n        textDecoration:\n          todo.complete\n            ? 'line-through'\n            : '',\n        color:\n          todo.complete\n            ? '#e4e4e4'\n            : '',\n      }}\n    >\n      <div className=\"view\">\n        <input\n          name=\"status\"\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          onChange={toggleComplete}\n          checked={todo.complete ? 'checked' : ''}\n        />\n        <label htmlFor=\"todo-1\">\n          {text}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={toDelete}\n        />\n      </div>\n    </li>\n  );\n}\n\nRTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  text: PropTypes.string.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  toDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport RTodo from '../RTodo/RTodo';\n\nimport { connect } from 'react-redux';\nimport { deleteOne, completeOne, completeAll } from '../actions';\n\nfunction RTodoList({\n  appState,\n  handleDelete,\n  toggleComplete,\n  toggleCompleteAll\n  }) {\n  let todosNew = [];\n\n  if (appState.rTodosToShow === 'all') {\n    todosNew = [...appState.rTodos];\n  } else if (appState.rTodosToShow === 'active') {\n    todosNew = [...appState.rTodos].filter(todo => !todo.complete);\n  } else if (appState.rTodosToShow === 'complete') {\n    todosNew = [...appState.rTodos].filter(todo => todo.complete);\n  }\n\n  return (\n    <section className=\"main\" style={{ display: 'block' }}>\n      <input\n        onClick={toggleCompleteAll}\n        type=\"checkbox\"\n        id=\"r-toggle-all\"\n        name=\"toggleAll\"\n        className=\"r-toggle-all\"\n      />\n      <label htmlFor=\"r-toggle-all\">Mark all as complete</label>\n      <ul className=\"todo-list\">\n        {todosNew.map(todo => (\n          <RTodo\n            todo={todo}\n            key={todo.id}\n            text={todo.text}\n            toDelete={() => handleDelete(todo.id)}\n            toggleComplete={() => toggleComplete(todo.id)}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  appState: state, \n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleDelete: (payload) => dispatch(deleteOne(payload)),\n  toggleComplete: (payload) => dispatch(completeOne(payload)),\n  toggleCompleteAll: (payload) => dispatch(completeAll(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RTodoList);\n\nRTodoList.propTypes = {\n  handleDelete: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  toggleCompleteAll: PropTypes.func.isRequired,\n  appState: PropTypes.shape({\n    rTodosToShow: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { toShowAll, toShowActive, toShowComplete, clearCompleted } from '../actions';\n\nfunction RFooter(\n  { \n    appState,\n    showAll,\n    showActive,\n    showComplete,\n    clearCompleted\n  }\n) {\n  const { rTodos, rTodosToShow } = appState;\n  const lengthOfTodos = () => [...rTodos].filter(\n    todo => todo.complete === false\n  ).length;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n      <span className=\"todo-count\">\n        {`${lengthOfTodos()} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => showAll()}\n            style={{\n              borderColor:\n              rTodosToShow === 'all'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => showActive()}\n            style={{\n              borderColor:\n              rTodosToShow === 'active'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => showComplete()}\n            style={{\n              borderColor:\n              rTodosToShow === 'complete'\n                ? 'rgba(175, 47, 47, 0.2)'\n                : '',\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        style={{ display: 'block' }}\n        onClick={() => {\n          clearCompleted();\n        }}\n      >\n        Clear all completed\n      </button>\n    </footer>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  appState: state,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  showAll: () => dispatch(toShowAll()),\n  showActive: () => dispatch(toShowActive()),\n  showComplete: () => dispatch(toShowComplete()),\n  clearCompleted: () => dispatch(clearCompleted()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RFooter);\n\nRFooter.propTypes = {\n  clearCompleted: PropTypes.func.isRequired,\n  showAll: PropTypes.func.isRequired,\n  showActive: PropTypes.func.isRequired,\n  showComplete: PropTypes.func.isRequired,\n  appState: PropTypes.shape({\n    rTodosToShow: PropTypes.string,\n  }).isRequired,\n};\n","import RTodoForm from '../RTodoForm/RTodoForm';\nimport RTodoList from '../RTodoList/RTodoList';\nimport RFooter from '../RFooter/RFooter';\n\nimport { connect } from 'react-redux';\n\n\nfunction RTodoApp({ appState }) {\n  const { rTodos } = appState;\n\n  if (rTodos.length === 0) {\n    return (\n      <>\n        <header className=\"header\">Redux-Todo 0</header>\n        <section className=\"todoapp\">\n          <RTodoForm />\n        </section>\n        <p>{rTodos.map((todo) => <p>{todo.text}</p>)}</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <header className=\"header\">Redux-Todo {rTodos.filter((todo) => !todo.complete).length}</header>\n      <section className=\"todoapp\">\n        <RTodoForm />\n        <RTodoList />\n        <RFooter />\n      </section>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  appState: state,\n});\n\nexport default connect(mapStateToProps)(RTodoApp);\n","const initialState = {\n  rTodos: [],\n  rTodosToShow: 'all',\n  toggleAll: true,\n};\n\nconst appReducer = ( state = initialState, action ) => {\n  switch(action.type) {\n    case 'ADD_RTODO':\n      return {\n        ...state,\n        rTodos: [action.payload, ...state.rTodos],\n      };\n    case 'DELETE_ONE':\n      return {\n        ...state,\n        rTodos: state.rTodos.filter(todo => todo.id !== action.payload)\n      };\n    case 'COMPLETE_ONE':\n      return {\n        ...state,\n        rTodos: state.rTodos.map((todo) => {\n          if (todo.id === action.payload) {\n            return {\n              ...todo,\n              complete: !todo.complete,\n            };\n          }\n    \n          return todo;\n        })\n      };\n    case 'COMPLETE_ALL':\n      return {\n        ...state,\n        toggleAll: !state.toggleAll,\n        rTodos: state.rTodos.map(todo => ({\n            ...todo,\n            complete: state.toggleAll,\n        }))\n      };\n    case 'SHOW_ALL':\n      return {\n        ...state,\n        rTodosToShow: 'all',\n      };\n    case 'SHOW_ACTIVE':\n      return {\n        ...state,\n        rTodosToShow: 'active',\n      };\n    case 'SHOW_COMPLETE':\n      return {\n        ...state,\n        rTodosToShow: 'complete',\n      };\n    case 'CLEAR_COMPLETED':\n      return {\n        ...state,\n        rTodos: state.rTodos.filter(todo => !todo.complete),\n      };\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;\n","import React, { Fragment } from 'react';\nimport FuncTodoApp from './components/Func/TodoApp/TodoApp';\nimport ClassTodoApp from './components/Class/CTodoApp/CTodoApp';\nimport RTodoApp from './components/Redux/RTodoApp/RTodoApp';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport appReducer from './components/Redux/reducers/reducer';\n\nconst store = createStore(appReducer);\n\nconst App = () => (\n  <>\n    <FuncTodoApp />\n    <ClassTodoApp />\n    <Provider store={store}>\n      <RTodoApp />\n    </Provider>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}